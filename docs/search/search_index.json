{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Principal FRCdigest Un bot de discord y aplicaci\u00f3n web open source con la misi\u00f3n de otorgar a los estudiantes de Ing. en Sistemas de Informaci\u00f3n de la UTN FRC, informaci\u00f3n digerida y \u00fatil, para facilitar la vida acad\u00e9mica. Soporte La base de datos de la aplicaci\u00f3n soporta los siguientes planes: Ing. en Sistemas de Informaci\u00f3n plan 2008 Comandos frc! help mensaje de ayuda, muestra una lista de los comandos soportados ch nickname <nuevo_apodo> modifica el apodo del bot por nuevo_apodo list subjects muestra una lista de materias junto con su ord. y acr\u00f3nimo(si tiene) rules <ord> muestra las correlativas para cursar y rendir la materia de ord ingresada C\u00f3mo empezar Creaci\u00f3n de la aplicaci\u00f3n y bot en el portal de discord Una vez que ya se tiene una cuenta de discord y un servidor creado en la aplicaci\u00f3n, es necesario entrar al portal para desarrolladores de discord . Dentro del portal hay que darle al bot\u00f3n New Aplication o Nueva Aplicaci\u00f3n . deber\u00eda aparecer esto en pantalla Se debe ingresar el nombre de la aplicaci\u00f3n( FRCdigest_dev ) y luego oprimir el bot\u00f3n create o crear . En este portal es necesario ir a la opci\u00f3n de bot que se puede ver a la izquierda, luego se debe crear un bot para la aplicaci\u00f3n. Es importante que solo la opci\u00f3n de public bot est\u00e9 activada, de lo contrario en los pr\u00f3ximos pasos se pueden presentar errores. Por \u00faltimo hay que ir a la secci\u00f3n OAuth2 , marcar la casilla de bot y copiar el link generado. Entrando al link a trav\u00e9s del navegador, nos va a dar la opci\u00f3n de agregar el bot a nuestro servidor de discord en seleccione un servidor Oprimiendo el bot\u00f3n Autorizar , nuestro bot ser\u00e1 agregado a nuestro servidor. \u00a1Ahora ya se tiene un servidor y bot para probar nuestro desarrollo! Ejecutar bot Ya con nuestra app, bot y servidor de desarrollo, es momento de ejecutar nuestro bot para ver si todo funciona correctamente. Es necesario en el portal de desarrollador de discord a la secci\u00f3n de bot y copiar el token generado por discord. Este token, debemos pegarlo en el archivo FRCdigest/app/bot/.env de la forma: TOKEN=nuestro_token_copiado_desde_el_portal_de_discord Ahora es necesario hacerle saber al bot que debe ejecutar el bot con dicho token, para que no trate de buscar el token en las environment variables como har\u00eda en un entorno de producci\u00f3n. Para esto, vamos a FRCdigest/app/bot/config.yml y cambiamos: environment: prod por: environment: env Listo, ahora nuestro bot est\u00e1 configurado para un entorno de desarrollo. Abrimos una terminal en la carpeta del repositorio, donde podemos ver la siguiente estructura de archivos: /FRCdigest /app /docs /DOCUMENTATION ... Procurando que el directorio de trabajo sea /FRCdigest , ejecutamos: python3 -m app.bot Si todo es correcto, en unos pocos segundos el bot se ejecutar\u00e1 con exito y podremos verlo activo en nuestro servidor de discord. Para verificar podemos escribir en chat del servidor el mensaje frc! help y el bot deber\u00eda contestar con un mensaje de ayuda mostrando los comandos soportados. Necesito ayuda En caso de cualquier duda o sugerencia, pod\u00e9s hablar por gitter :)","title":"Principal"},{"location":"#principal","text":"","title":"Principal"},{"location":"#frcdigest","text":"Un bot de discord y aplicaci\u00f3n web open source con la misi\u00f3n de otorgar a los estudiantes de Ing. en Sistemas de Informaci\u00f3n de la UTN FRC, informaci\u00f3n digerida y \u00fatil, para facilitar la vida acad\u00e9mica.","title":"FRCdigest"},{"location":"#soporte","text":"La base de datos de la aplicaci\u00f3n soporta los siguientes planes: Ing. en Sistemas de Informaci\u00f3n plan 2008","title":"Soporte"},{"location":"#comandos","text":"frc! help mensaje de ayuda, muestra una lista de los comandos soportados ch nickname <nuevo_apodo> modifica el apodo del bot por nuevo_apodo list subjects muestra una lista de materias junto con su ord. y acr\u00f3nimo(si tiene) rules <ord> muestra las correlativas para cursar y rendir la materia de ord ingresada","title":"Comandos"},{"location":"#como-empezar","text":"","title":"C\u00f3mo empezar"},{"location":"#creacion-de-la-aplicacion-y-bot-en-el-portal-de-discord","text":"Una vez que ya se tiene una cuenta de discord y un servidor creado en la aplicaci\u00f3n, es necesario entrar al portal para desarrolladores de discord . Dentro del portal hay que darle al bot\u00f3n New Aplication o Nueva Aplicaci\u00f3n . deber\u00eda aparecer esto en pantalla Se debe ingresar el nombre de la aplicaci\u00f3n( FRCdigest_dev ) y luego oprimir el bot\u00f3n create o crear . En este portal es necesario ir a la opci\u00f3n de bot que se puede ver a la izquierda, luego se debe crear un bot para la aplicaci\u00f3n. Es importante que solo la opci\u00f3n de public bot est\u00e9 activada, de lo contrario en los pr\u00f3ximos pasos se pueden presentar errores. Por \u00faltimo hay que ir a la secci\u00f3n OAuth2 , marcar la casilla de bot y copiar el link generado. Entrando al link a trav\u00e9s del navegador, nos va a dar la opci\u00f3n de agregar el bot a nuestro servidor de discord en seleccione un servidor Oprimiendo el bot\u00f3n Autorizar , nuestro bot ser\u00e1 agregado a nuestro servidor. \u00a1Ahora ya se tiene un servidor y bot para probar nuestro desarrollo!","title":"Creaci\u00f3n de la aplicaci\u00f3n y bot en el portal de discord"},{"location":"#ejecutar-bot","text":"Ya con nuestra app, bot y servidor de desarrollo, es momento de ejecutar nuestro bot para ver si todo funciona correctamente. Es necesario en el portal de desarrollador de discord a la secci\u00f3n de bot y copiar el token generado por discord. Este token, debemos pegarlo en el archivo FRCdigest/app/bot/.env de la forma: TOKEN=nuestro_token_copiado_desde_el_portal_de_discord Ahora es necesario hacerle saber al bot que debe ejecutar el bot con dicho token, para que no trate de buscar el token en las environment variables como har\u00eda en un entorno de producci\u00f3n. Para esto, vamos a FRCdigest/app/bot/config.yml y cambiamos: environment: prod por: environment: env Listo, ahora nuestro bot est\u00e1 configurado para un entorno de desarrollo. Abrimos una terminal en la carpeta del repositorio, donde podemos ver la siguiente estructura de archivos: /FRCdigest /app /docs /DOCUMENTATION ... Procurando que el directorio de trabajo sea /FRCdigest , ejecutamos: python3 -m app.bot Si todo es correcto, en unos pocos segundos el bot se ejecutar\u00e1 con exito y podremos verlo activo en nuestro servidor de discord. Para verificar podemos escribir en chat del servidor el mensaje frc! help y el bot deber\u00eda contestar con un mensaje de ayuda mostrando los comandos soportados.","title":"Ejecutar bot"},{"location":"#necesito-ayuda","text":"En caso de cualquier duda o sugerencia, pod\u00e9s hablar por gitter :)","title":"Necesito ayuda"},{"location":"about/","text":"Acerca Releases (versiones) ...notas sobre las diferentes releases Quienes somos ...quienes somos Licencia ...link a la licencia","title":"Acerca"},{"location":"about/#acerca","text":"","title":"Acerca"},{"location":"about/#releases-versiones","text":"...notas sobre las diferentes releases","title":"Releases (versiones)"},{"location":"about/#quienes-somos","text":"...quienes somos","title":"Quienes somos"},{"location":"about/#licencia","text":"...link a la licencia","title":"Licencia"},{"location":"contributing/","text":"Participar en el proyecto Un vistazo Tu primer issue De entre la lista de issues activos , aquellos que son considerados aptos para reci\u00e9n iniciados en el proyecto, llevan una etiqueta de buen primer issue Si ten\u00e9s una sugerencia o encontraste alg\u00fan bug o problema, tambi\u00e9n pod\u00e9s simplemente crear un nuevo issue Con qui\u00e9n hablar Si ten\u00e9s dudas sobre c\u00f3mo sumarte al proyecto, pod\u00e9s consultar por gitter Si est\u00e1s en el servidor de discord de Sistemas, pod\u00e9s enviar un mensaje en ese mismo servidor etiquetando: @Romero Carranza Emiliano C\u00f3mo lo hacemos ...descripci\u00f3n del proceso de desarollo","title":"Participar en el proyecto"},{"location":"contributing/#participar-en-el-proyecto","text":"","title":"Participar en el proyecto"},{"location":"contributing/#un-vistazo","text":"","title":"Un vistazo"},{"location":"contributing/#tu-primer-issue","text":"De entre la lista de issues activos , aquellos que son considerados aptos para reci\u00e9n iniciados en el proyecto, llevan una etiqueta de buen primer issue Si ten\u00e9s una sugerencia o encontraste alg\u00fan bug o problema, tambi\u00e9n pod\u00e9s simplemente crear un nuevo issue","title":"Tu primer issue"},{"location":"contributing/#con-quien-hablar","text":"Si ten\u00e9s dudas sobre c\u00f3mo sumarte al proyecto, pod\u00e9s consultar por gitter Si est\u00e1s en el servidor de discord de Sistemas, pod\u00e9s enviar un mensaje en ese mismo servidor etiquetando: @Romero Carranza Emiliano","title":"Con qui\u00e9n hablar"},{"location":"contributing/#como-lo-hacemos","text":"...descripci\u00f3n del proceso de desarollo","title":"C\u00f3mo lo hacemos"},{"location":"developer_guides/","text":"Gu\u00edas para el desarrollador Estructura de archivos ...notas sobre la estructura de archivos Api ...notas sobre la api Bot ...notas sobre el bot Base de datos ...notas sobre la base de datos","title":"Gu\u00edas para el desarrollador"},{"location":"developer_guides/#guias-para-el-desarrollador","text":"","title":"Gu\u00edas para el desarrollador"},{"location":"developer_guides/#estructura-de-archivos","text":"...notas sobre la estructura de archivos","title":"Estructura de archivos"},{"location":"developer_guides/#api","text":"...notas sobre la api","title":"Api"},{"location":"developer_guides/#bot","text":"...notas sobre el bot","title":"Bot"},{"location":"developer_guides/#base-de-datos","text":"...notas sobre la base de datos","title":"Base de datos"},{"location":"documentation/","text":"Bienvenido a la documentaci\u00f3n de FRCdigest visita nuestro repositorio en github . /api En este m\u00f3dulo se encuentran todos los archivos que hacen a la api de la aplicaci\u00f3n. El prop\u00f3sito de esta es provisorio. No se deben crear issues referidos a este m\u00f3dulo, ya que se prevee para la versi\u00f3n 1.0 la creaci\u00f3n de una api en un repositorio separado. /bot En este modulo se encuentran todos los archivos que hacen al bot de discord para la aplicaci\u00f3n. /bot /command .env __init__.py __main__.py config.db config.py config.yml setup_config_database.py /bot/command/ Este m\u00f3dulo contiene todos los archivos necesarios para ser utilizado en el procesamiento de comandos. /command __main__.py command_dictionary.py commander.py /bot/command/__main__.py /bot/command/command_dictionary.py Contiene una funci\u00f3n por cada comando soportado, esta funci\u00f3n se encarga de realizar las acciones asociadas al comando(lo que se supone que debe realizar). Tambi\u00e9n contiene un diccionario con el tag de cada comando y la respectiva funci\u00f3n de este. /bot/command/commander.py Contiene un objeto Commander el cual debe recibir un comando como parametro para ser inicializado. class Commander(): def __init__(self, command): self.command = command self.parameters = [] self.to_do = '' self.command_dictionary = command_dictionary.dictionary self.response = '' import commander as cmdr commander = cmdr.Commander(command) Este objeto es responsable de: detectar cu\u00e1l comando se est\u00e1 llamando obtener los par\u00e1metros junto a este verificar los par\u00e1metros formatear los par\u00e1metros como un vector ejecutar el comando. commander.detect() Este m\u00e9todo se encarga de detectar cu\u00e1l comando ha sido llamado. Verifica que el comando recibido, ya guardado en self.command, no est\u00e9 vac\u00edo. Luego, mediante el vector de supported_commands y el vector tag , paralelos entre s\u00ed, trata de encontrar una ocurrencia en supported_commands que verifique el comando. Finalmente se guarda en self.to_do el respectivo valor del vector tag /bot/.env /bot/__main__.py /bot/config.db /bot/config.py /bot/config.yml /bot/setup_config_database.py /database/ En este directorio se encuentra la base de datos sqlite , archivos .csv y scripts de python para manejar la base de datos y los archivos .csv","title":"Bienvenido a la documentaci\u00f3n de FRCdigest"},{"location":"documentation/#bienvenido-a-la-documentacion-de-frcdigest","text":"visita nuestro repositorio en github .","title":"Bienvenido a la documentaci\u00f3n de FRCdigest"},{"location":"documentation/#api","text":"En este m\u00f3dulo se encuentran todos los archivos que hacen a la api de la aplicaci\u00f3n. El prop\u00f3sito de esta es provisorio. No se deben crear issues referidos a este m\u00f3dulo, ya que se prevee para la versi\u00f3n 1.0 la creaci\u00f3n de una api en un repositorio separado.","title":"/api"},{"location":"documentation/#bot","text":"En este modulo se encuentran todos los archivos que hacen al bot de discord para la aplicaci\u00f3n. /bot /command .env __init__.py __main__.py config.db config.py config.yml setup_config_database.py","title":"/bot"},{"location":"documentation/#botcommand","text":"Este m\u00f3dulo contiene todos los archivos necesarios para ser utilizado en el procesamiento de comandos. /command __main__.py command_dictionary.py commander.py","title":"/bot/command/"},{"location":"documentation/#botcommand__main__py","text":"","title":"/bot/command/__main__.py"},{"location":"documentation/#botcommandcommand_dictionarypy","text":"Contiene una funci\u00f3n por cada comando soportado, esta funci\u00f3n se encarga de realizar las acciones asociadas al comando(lo que se supone que debe realizar). Tambi\u00e9n contiene un diccionario con el tag de cada comando y la respectiva funci\u00f3n de este.","title":"/bot/command/command_dictionary.py"},{"location":"documentation/#botcommandcommanderpy","text":"Contiene un objeto Commander el cual debe recibir un comando como parametro para ser inicializado. class Commander(): def __init__(self, command): self.command = command self.parameters = [] self.to_do = '' self.command_dictionary = command_dictionary.dictionary self.response = '' import commander as cmdr commander = cmdr.Commander(command) Este objeto es responsable de: detectar cu\u00e1l comando se est\u00e1 llamando obtener los par\u00e1metros junto a este verificar los par\u00e1metros formatear los par\u00e1metros como un vector ejecutar el comando.","title":"/bot/command/commander.py"},{"location":"documentation/#_1","text":"commander.detect() Este m\u00e9todo se encarga de detectar cu\u00e1l comando ha sido llamado. Verifica que el comando recibido, ya guardado en self.command, no est\u00e9 vac\u00edo. Luego, mediante el vector de supported_commands y el vector tag , paralelos entre s\u00ed, trata de encontrar una ocurrencia en supported_commands que verifique el comando. Finalmente se guarda en self.to_do el respectivo valor del vector tag","title":""},{"location":"documentation/#botenv","text":"","title":"/bot/.env"},{"location":"documentation/#bot__main__py","text":"","title":"/bot/__main__.py"},{"location":"documentation/#botconfigdb","text":"","title":"/bot/config.db"},{"location":"documentation/#botconfigpy","text":"","title":"/bot/config.py"},{"location":"documentation/#botconfigyml","text":"","title":"/bot/config.yml"},{"location":"documentation/#botsetup_config_databasepy","text":"","title":"/bot/setup_config_database.py"},{"location":"documentation/#database","text":"En este directorio se encuentra la base de datos sqlite , archivos .csv y scripts de python para manejar la base de datos y los archivos .csv","title":"/database/"}]}